{"meta":{"title":"yangcore's blog","subtitle":null,"description":"yangcore's blog","author":"yangchao","url":"https://yangcore.github.io"},"pages":[],"posts":[{"title":"Git的常用命令","slug":"git的常用命令","date":"2017-12-17T16:00:00.000Z","updated":"2017-12-27T10:09:05.496Z","comments":true,"path":"2017/12/18/git的常用命令/","link":"","permalink":"https://yangcore.github.io/2017/12/18/git的常用命令/","excerpt":"","text":"查看所有分支git branch -a 查看本地分支git branch 创建分支git branch test 切换分支git checkout test M jingwei-server/src/main/java/com/taobao/jingwei/server/service/cmd/GetCustomerTarCmd.java M jingwei-server/src/main/java/com/taobao/jingwei/server/util/ServerUtil.java Switched to branch &#39;test&#39; M 表示cong 原来分支（上一次修改没有提交br-2.1.2.2）带过来的修改 把分支推送到远程分支git push origin test git 删除本地分支和远程分支、本地代码回滚和远程代码库回滚【git 删除本地分支】 git branch -D br 【git 删除远程分支】 git push origin :br (origin 后面有空格) git代码库回滚: 指的是将代码库某分支退回到以前的某个commit id 【本地代码库回滚】： git reset –hard commit-id :回滚到commit-id，讲commit-id之后提交的commit都去除 git reset –hard HEAD~3：将最近3次的提交回滚 【远程代码库回滚】： 这个是重点要说的内容，过程比本地回滚要复杂 应用场景：自动部署系统发布后发现问题，需要回滚到某一个commit，再重新发布 原理：先将本地分支退回到某个commit，删除远程分支，再重新push本地分支 操作步骤： 1、git checkout the_branch 2、git pull 3、git branch the_branch_backup //备份一下这个分支当前的情况 4、git reset –hard the_commit_id //把the_branch本地回滚到the_commit_id 5、git push origin :the_branch //删除远程 the_branch 6、git push origin the_branch //用回滚后的本地分支重新建立远程分支 7、git push origin :the_branch_backup //如果前面都成功了，删除这个备份分支 如果使用了gerrit做远程代码中心库和code review平台，需要确保操作git的用户具备分支的push权限，并且选择了 Force Push选项（在push权限设置里有这个选项） 另外，gerrit中心库是个bare库，将HEAD默认指向了master，因此master分支是不能进行删除操作的，最好不要选择删除master分支的策略，换用其他分支。如果一定要这样做，可以考虑到gerrit服务器上修改HEAD指针。。。不建议这样搞","categories":[{"name":"工具","slug":"工具","permalink":"https://yangcore.github.io/categories/工具/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://yangcore.github.io/tags/Git/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"https://yangcore.github.io/categories/工具/"}]},{"title":"Npm切换淘宝源","slug":"npm切换淘宝源","date":"2017-12-03T16:00:00.000Z","updated":"2017-12-27T10:09:05.496Z","comments":true,"path":"2017/12/04/npm切换淘宝源/","link":"","permalink":"https://yangcore.github.io/2017/12/04/npm切换淘宝源/","excerpt":"","text":"npm切换淘宝源众所周知国内访问npm十分不稳定，所以才会有镜像源的存在了，在中国大家经常使用的就是阿里的npm淘宝源；这里就说一下如何切换； 第一种方法就是直接安装淘宝定制的cnpm命令行工具替代npm打开 cnpm官网可以看一下使用说明 直接安装 npm install -g cnpm --registry=https://registry.npm.taobao.org 这种方式安装cnpm后就可以使用cnpm命令来代替npm命令执行相关操作了 直接使用npm切换镜像源npm 内置配置是可以切换镜像源的 1.临时使用 npm --registry https://registry.npm.taobao.org install express 2.持久使用 npm config set registry https://registry.npm.taobao.org // 配置后可通过下面方式来验证是否成功 npm config get registry // 或npm info express 这样还是熟悉的npm命令，但是获取包的时候就是从淘宝的镜像获取的，所以速度要快很多。","categories":[{"name":"工具","slug":"工具","permalink":"https://yangcore.github.io/categories/工具/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://yangcore.github.io/tags/npm/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"https://yangcore.github.io/categories/工具/"}]},{"title":"Chrome的跨域配置","slug":"chrome的跨域配置","date":"2017-12-01T16:00:00.000Z","updated":"2017-12-27T10:09:05.496Z","comments":true,"path":"2017/12/02/chrome的跨域配置/","link":"","permalink":"https://yangcore.github.io/2017/12/02/chrome的跨域配置/","excerpt":"","text":"chrome的跨域配置,前端调试利器由于浏览器安全性限制，Ajax是不能跨域访问的，而我们在日常开发工作中，经常会出现本地开发环境需要访问其他服务器上的API情况，尤其在用html5开发APP的过程中，前后台完全分离，使用Ajax进行数据交互。本文说明如何让Chrome浏览器支持开发时的Ajax跨域访问。 找到桌面chrome图标，点击右键属性 原属性里面的目标应该是 &quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot; 要想实现跨域请求就要在chrome启动时添加参数，所以修改成这样 &quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot; --enable-net-benchmarking --user-data-dir --test-type --disable-web-security 顺便推荐一下我使用的一个插件，就是当你在开发时快速切换host，切换开发环境的时候，可以点击一下，快速刷新浏览器的dns缓存，方便快速切换到当前环境； 插件地址 DNS Flusher : https://chrome.google.com/webstore/detail/okehcbagcgnhifhcppklpmillcdnaclp 以上 --enable-net-benchmarking 参数 就是 DNS Flusher插件所需的参数 --user-data-dir 这个参数是说让chrome自定义用户数据地址，这里后面没有添加地址，所以用户数据还是源地址，若你想自定义chrome的用户数据地址 可以写成这样 --user-data-dir=&quot;C:\\ChromeDebug&quot; (这里自定义在C盘的ChromeDebug文件夹) --disable-web-security 这个就是关键的参数，让浏览器禁用安全限制，这样就可以跨域请求了 --test-type 这个指测试模式，如果不加这一句也是可以的，我是加上了，因为不加这一句，chrome会有安全提示 好了，到这一步，你可以试一试跨域请求了； 这样，从快捷键启动Google Chrome即可启动指定参数，但是从外部程序(例如QQ、迅雷)打开Chrome时，Chrome是无法带参数启动的，(如果你自定义了用户数据地址，此时也无法调用指定的userdata插件、书签等)要使外部调用也能生效，还需要修改注册表。 打开注册表，定位到以下项 HKEY_CLASSES_ROOT\\ChromeHTML\\shell\\open\\command HKEY_CLASSES_ROOT\\http\\shell\\open\\command HKEY_CLASSES_ROOT\\https\\shell\\open\\command HKEY_CLASSES_ROOT\\ftp\\shell\\open\\command 依次找到并修改以上4个位置，双击右侧窗口中的“(默认)”，随之弹出编辑字符串对话框，在“数值数据”框中将光标移到”Chrome路径”和– “%1”之间，然后插入Chrome命令及参数 --enable-net-benchmarking --user-data-dir --test-type --disable-web-security 以上4个位置修改后关闭注册表编辑器，以后无论你如何启动Google Chrome，用户文件和临时文件都会到你所设置的目录加载插件和书签 快快试试吧！！！","categories":[{"name":"工具","slug":"工具","permalink":"https://yangcore.github.io/categories/工具/"}],"tags":[{"name":"chrome","slug":"chrome","permalink":"https://yangcore.github.io/tags/chrome/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"https://yangcore.github.io/categories/工具/"}]},{"title":"Hello Hexo","slug":"hello-hexo","date":"2017-11-20T16:00:00.000Z","updated":"2017-12-27T10:09:05.496Z","comments":true,"path":"2017/11/21/hello-hexo/","link":"","permalink":"https://yangcore.github.io/2017/11/21/hello-hexo/","excerpt":"","text":"第一篇博客，就写写我在配置Hexo的时候遇到的问题吧 跳过Hexo的渲染，创建自定义网页 1.创建自定义页面在Hexo/source目录下创建一个文件夹,about.html 部署完成后，访问http://yangcore.github.io/yang/about.html 即可看到效果，依此类推）。 2.跳过Hexo的渲染如果你按照我上面的操作做了，你会发现，进入上面的链接不会报404或者找不到页面报错了，但是出来的页面并不是我们自己自定义的页面内容；这个时候我们就要跳过Hexo的渲染，直出我们自己定义的页面。跳过Hexo渲染有两种方式： 1.直接在静态文件的头部添加跳过渲染指令打开我们刚刚写的Hexo/source/yang/about.html文件，在文档最顶部添加如下代码 --- layout: false --- 2.可在配置文件中添加要跳过的文件或文件夹支持下面几种下发 skip_render: test.html //跳过指定文件 skip_render: test/* //正则跳过test下的文件 skip_render: test/** //跳过test下的所有文件，包括子文件夹 //跳过多个路径 skip_render: - test.html - test/* 以上两种方式引入静态资源的时候可在当前文件夹下创建静态文件，直接相对路径引入， // 引入 Hexo/source/yang/css 下的文件 &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/index.css&quot;&gt; 若想引入source内的静态文件 //这个路径引入的是 Hexo/themes/yourthemes/source/css 下的文件 &lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt; 完成，执行 hexo g 访问看一下，这样你就可以在hexo内添加自定义页面了，比如可以自定义关于我们等静态页面了代码块高亮说说我自定义代码块高亮遇到的坑，本想着用hexo自带的 highlight 配置来着，但是当把 _config.yml 文件里的 highlight 配置打开，代码块始终没有颜色，可能是我不会用吧，就想着自己搞一下用 highlight.js实现代码块高亮； 很简单：在页面引入 &lt;%- js(&#39;//cdn.bootcss.com/highlight.js/9.12.0/highlight.min.js?rev=@@hash&#39;) %&gt; //我这里用的是vs主题，你可以自己找喜欢的主题 &lt;%- css([&#39;//cdn.bootcss.com/highlight.js/9.12.0/styles/vs.min.css&#39;]) %&gt; &lt;script&gt; hljs.initHighlightingOnLoad(); //初始化代码高亮 &lt;/script&gt; 注意： 如果自己外部引入 highlight.js 来制作代码高亮的，必须关闭 hexo 自带的 highlight 的配置，_config.yml highlight.enable 改为 fasle 不然可能会造成代码块渲染错误 主题更换本博客采用的是 hexo-theme-snippet 喜欢的可以去看一下，作者中国人，说明写的很详细，特别是里面说了一下 Travis CI 持续集成的相关配置；本博客就是使用Travis CI持续集成构建的","categories":[{"name":"前端","slug":"前端","permalink":"https://yangcore.github.io/categories/前端/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://yangcore.github.io/tags/hexo/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://yangcore.github.io/categories/前端/"}]}]}